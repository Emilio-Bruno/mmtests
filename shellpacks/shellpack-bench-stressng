#!/bin/bash

P=stressng-bench
DEFAULT_VERSION=0
. $SHELLPACK_INCLUDE/common.sh
TIME_CMD=`which time`
if [ "$TIME_CMD" = "" ]; then
        TIMEFORMAT="%2Uuser %2Ssystem %Relapsed %P%%CPU"
        TIME_CMD="time"
fi

STRESSNG_MIN_THREADS=1
STRESSNG_MAX_THREADS=1
STRESSNG_RUNTIME=150
STRESSNG_ITERATIONS=3
STRESSNG_TESTNAME=context

# Basic argument parser
TASKSET_SERVER=
TASKSET_CLIENT=
TASKSET_ALL=
SERVERSIDE_COMMAND=none
SERVERSIDE_NAME=`date +%Y%m%d-%H%M-%S`

while [ "$1" != "" ]; do
	case "$1" in
	-v)
		VERSION=$2
		shift 2
		;;
	--serverside-command)
		SERVERSIDE_COMMAND=$2
		shift 2
		;;
	--serverside-name)
		SERVERSIDE_NAME=$2
		shift 2
		;;
	--install-only)
		INSTALL_ONLY=yes
		shift
		;;
	--install-force)
		INSTALL_FORCE=yes
		shift
		;;
	--min-threads)
		STRESSNG_MIN_THREADS=$2
		shift 2
		;;
	--max-threads)
		STRESSNG_MAX_THREADS=$2
		shift 2
		;;
	--runtime)
		STRESSNG_RUNTIME=$2
		shift 2
		;;
	--iterations)
		STRESSNG_ITERATIONS=$2
		shift 2
		;;
	--testname)
		STRESSNG_TESTNAME=$2
		shift 2
		;;
	*)
		echo Unrecognised option: $1
		shift
	esac
done
if [ "$TASKSET_SERVER" != "" ]; then
	echo TASKSET_SERVER: $TASKSET_SERVER
	echo TASKSET_CLIENT: $TASKSET_CLIENT
fi
if [ -z "$VERSION" ]; then
	VERSION=$DEFAULT_VERSION
fi

if [ "$INSTALL_FORCE" = "yes" ]; then
	rm -rf $SHELLPACK_SOURCES/stressng-${VERSION}
fi
if [ ! -d $SHELLPACK_SOURCES/stressng-${VERSION}-installed ]; then
	mmtests_activity source-install
	$SHELLPACK_INCLUDE/shellpack-install-stressng -v ${VERSION}  || die stressng install script returned error
	mmtests_activity source-installed
fi
cd $SHELLPACK_SOURCES/stressng-${VERSION}-installed || die Failed to cd to stressng install directory
if [ "$INSTALL_ONLY" = "yes" ]; then
	echo stressng installed only as requested.
	exit $SHELLPACK_SUCCESS
fi
# Include monitor hooks
. $SHELLPACK_INCLUDE/include-monitor.sh

TESTSWITCH=
case $STRESSNG_TESTNAME in
context)
	TESTSWITCH="--context"
	;;
*)
	die "Unrecognised test $STRESSNG_TESTNAME"
	;;
esac

NR_THREADS=$STRESSNG_MIN_THREADS
if [ "$NR_THREADS" = "" ]; then
	NR_THREADS=1
fi
THREADS=$NR_THREADS
NR_THREADS=$((NR_THREADS*2))
if [ "$MMTESTS_THREAD_CUTOFF" != "" ]; then
	echo Forcing STRESSNG_MAX_THREADS to $MMTESTS_THREAD_CUTOFF
	STRESSNG_MAX_THREADS=$MMTESTS_THREAD_CUTOFF
fi
while [ $NR_THREADS -le $STRESSNG_MAX_THREADS ]; do
	THREADS="$THREADS $NR_THREADS"
	NR_THREADS=$((NR_THREADS*2))
done
if [ `echo $THREADS | awk '{print $NF}'` -ne $STRESSNG_MAX_THREADS ]; then
	THREADS="$THREADS $STRESSNG_MAX_THREADS"
fi
for NR_THREADS in $THREADS; do
	if [ $NR_THREADS -gt $STRESSNG_MAX_THREADS ]; then
		NR_THREADS=$STRESSNG_MAX_THREADS
	fi
	mmtests_activity process $NR_THREADS/$STRESSNG_MAX_THREADS
	mmtests_activity $NR_THREADS
	monitor_pre_hook $LOGDIR_RESULTS $NR_THREADS

for ITERATION in `seq 1 $STRESSNG_ITERATIONS`; do
	mmtests_activity iteration $ITERATION
		echo Running $NR_THREADS stressng $STRESSNG_TESTNAME iteration $ITERATION
		$TIME_CMD -o $LOGDIR_RESULTS/time-$NR_THREADS-$ITERATION \
			./stress-ng $TESTSWITCH $NR_THREADS \
				--timeout ${STRESSNG_RUNTIME}s \
				--metrics-brief 2>&1 |\
				tee $LOGDIR_RESULTS/stressng-$NR_THREADS-$ITERATION.log
sync
done

	monitor_post_hook $LOGDIR_RESULTS $NR_THREADS
done

exit $SHELLPACK_SUCCESS
#### Description A small-ish program to benchmark wakeup latencies.
#### Details stressng-bench 4
