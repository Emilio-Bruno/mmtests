#!/bin/bash
# Run stockfish benchmark

P=stockfish-bench
DEFAULT_VERSION=0
. $SHELLPACK_INCLUDE/common.sh
TIME_CMD=`which time`
if [ "$TIME_CMD" = "" ]; then
        TIMEFORMAT="%2Uuser %2Ssystem %Relapsed %P%%CPU"
        TIME_CMD="time"
fi

ITERATIONS=12
TESTLIST=

# Basic argument parser
TASKSET_SERVER=
TASKSET_CLIENT=
TASKSET_ALL=
SERVERSIDE_COMMAND=none
SERVERSIDE_NAME=`date +%Y%m%d-%H%M-%S`

while [ "$1" != "" ]; do
	case "$1" in
	-v)
		VERSION=$2
		shift 2
		;;
	--serverside-command)
		SERVERSIDE_COMMAND=$2
		shift 2
		;;
	--serverside-name)
		SERVERSIDE_NAME=$2
		shift 2
		;;
	--install-only)
		INSTALL_ONLY=yes
		shift
		;;
	--install-force)
		INSTALL_FORCE=yes
		shift
		;;
	--min-threads)
		STOCKFISH_MIN_THREADS=$2
		shift 2
		;;
	--max-threads)
		STOCKFISH_MAX_THREADS=$2
		shift 2
		;;
	--iterations)
		STOCKFISH_ITERATIONS=$2
		shift 2
		;;
	*)
		echo Unrecognised option: $1
		shift
	esac
done
if [ "$TASKSET_SERVER" != "" ]; then
	echo TASKSET_SERVER: $TASKSET_SERVER
	echo TASKSET_CLIENT: $TASKSET_CLIENT
fi
if [ -z "$VERSION" ]; then
	VERSION=$DEFAULT_VERSION
fi

if [ "$INSTALL_FORCE" = "yes" ]; then
	rm -rf $SHELLPACK_SOURCES/stockfish-${VERSION}
fi
if [ ! -d $SHELLPACK_SOURCES/stockfish-${VERSION}-installed ]; then
	mmtests_activity source-install
	$SHELLPACK_INCLUDE/shellpack-install-stockfish -v ${VERSION}  || die stockfish install script returned error
	mmtests_activity source-installed
fi
cd $SHELLPACK_SOURCES/stockfish-${VERSION}-installed || die Failed to cd to stockfish install directory
if [ "$INSTALL_ONLY" = "yes" ]; then
	echo stockfish installed only as requested.
	exit $SHELLPACK_SUCCESS
fi

# Create expect script
EXPECT=`which expect`
EXPECT_SCRIPT=$SHELLPACK_TEMP/stockfish-expect

if [ $STOCKFISH_MAX_THREADS -gt 128 ]; then
	STOCKFISH_MAX_THREADS=128
fi

THREADS=
START_THREAD=$STOCKFISH_MIN_THREADS
if [ "$MMTESTS_THREAD_CUTOFF" != "" ]; then
	echo Forcing STOCKFISH_MAX_THREADS to $MMTESTS_THREAD_CUTOFF
	STOCKFISH_MAX_THREADS=$MMTESTS_THREAD_CUTOFF
fi
END_THREAD=$STOCKFISH_MAX_THREADS
if [ $END_THREAD -gt 32 ]; then
	THREADS=`seq $START_THREAD 3 8`
	THREADS="$THREADS `seq 12 9 32`"
	THREADS="$THREADS `seq 48 31 $END_THREAD`"
elif [ $END_THREAD -gt 8 ]; then
	THREADS=`seq $START_THREAD 2 8`
	THREADS="$THREADS `seq 12 6 $END_THREAD`"
else
	THREADS=`seq $START_THREAD 2 $END_THREAD`
fi
if [ `echo $THREADS | awk '{print $NF}'` -ne $END_THREAD ]; then
	THREADS="$THREADS $END_THREAD"
fi

for NR_THREADS in $THREADS; do
	if [ $NR_THREADS -lt $STOCKFISH_MIN_THREADS ]; then
		continue
	fi
	mmtests_activity process $NR_THREADS/$END_THREAD
cat > $EXPECT_SCRIPT <<EOF
spawn $SHELLPACK_SOURCES/stockfish-${VERSION}-installed/bin/stockfish
expect "Stockfish"             {
exp_send "uci\\r"
exp_send "setoption name Threads value $NR_THREADS\\r"
exp_send "setoption name Hash value 1024\\r"
exp_send "position fen rnbq1rk1/pppnbppp/4p3/3pP1B1/3P3P/2N5/PPP2PP1/R2QKBNR w KQ - 0 7\\r"
exp_send "go wtime 7200000 winc 30000 btime 7200000 binc 30000\\r"
}
while {1} {
  expect bestmove exit
}
EOF

ulimit -s unlimited

chmod u+x $EXPECT_SCRIPT
for ITERATION in `seq 1 $STOCKFISH_ITERATIONS`; do
	mmtests_activity iteration $ITERATION
	echo Starting iteration $ITERATION threads $NR_THREADS
	$TIME_CMD -o $LOGDIR_RESULTS/time-$NR_THREADS-$ITERATION \
		$EXPECT -f $EXPECT_SCRIPT > $LOGDIR_RESULTS/stockfish-$NR_THREADS-$ITERATION
sync
done
done

exit $SHELLPACK_SUCCESS
#### Description stockfish
#### Details stockfish-bench 11
