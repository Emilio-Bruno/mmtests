#!/bin/bash
###SHELLPACK preamble openfoam-bench OpenFOAM-v1812

###SHELLPACK parseargBegin
###SHELLPACK parseargInstall
###SHELLPACK parseargBindings
###SHELLPACK parseargParam --max-cpus	OPENFOAM_MAXCPUS
###SHELLPACK parseargParam --model	OPENFOAM_MODEL
###SHELLPACK parseargParam --iterations	OPENFOAM_ITERATIONS
###SHELLPACK parseargEnd
###SHELLPACK monitor_hooks

# Install openmpi requirements
if [ "$OPENFOAM_OPENMPI_VERSION" = "openmpi3" ]; then
	if [ ! -z $OPENFOAM_LOCAL_USER ] ; then
		install-depends openmpi3-gnu-hpc-devel
	fi
	module load gnu openmpi/3 || die "Could not load openmpi/3 module"
elif [ "$OPENFOAM_OPENMPI_VERSION" = "openmpi2" ]; then
	if [ ! -z $OPENFOAM_LOCAL_USER ] ; then
		install-depends openmpi2-gnu-hpc-devel
	fi
	module load gnu openmpi/2 || die "Could not load openmpi/2 module"
else
	die "\$OPENFOAM_OPENMPI_VERSION must be openmpi2 or openmpi3"
fi

export OMPI_TMPDIR=$SHELLPACK_DATA
export TMPDIR=$SHELLPACK_DATA

###SHELLPACK check_external_install_required openfoambuild openfoambuild-${VERSION} ${VERSION}
###SHELLPACK init_complete

cd $SHELLPACK_SOURCES/openfoambuild-$VERSION-installed/ || die "Failed to cd to openfoam installation directory"
source etc/bashrc || die "Failed to source bash environment"

# Configure benchmark
case $OPENFOAM_MODEL in
motorbike-tutorial)
	cd tutorials/incompressible/simpleFoam/ || die "Failed to cd to simpleFoam tutorial directory"
	rm -rf motorBike-mmtests
	cp -r motorBike motorBike-mmtests
	cd motorBike-mmtests || die "Failed to cd to motorbike-mmtests tutorial directory"
cat > system/fvSolution <<EOF 
/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1812                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      fvSolution;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

solvers
{
    p
    {
        solver          PCG;
        preconditioner  DIC;
        tolerance       1e-06;
        relTol          0.05;
    }

    pFinal
    {
        $p;
        relTol          0;
    }

    U
    {
        solver          smoothSolver;
        smoother        symGaussSeidel;
        tolerance       1e-05;
        relTol          0;
    }
}
SIMPLE
{
    nNonOrthogonalCorrectors 0;
    consistent yes;
}

potentialFlow
{
    nNonOrthogonalCorrectors 10;
}

relaxationFactors
{
    equations
    {
        U               0.9;
        k               0.7;
        omega           0.7;
    }
}

cache
{
    grad(U);
}

// ************************************************************************* //
EOF

	SUBDOMAINS=$OPENFOAM_MAXCPUS
	XDIVISON=0
	YDIVISION=0

	# Starting from SUBDOMAINs, calculate the maximum subdomains
	# allowed while maintaining a 3 to 2 ratio for divisions in
	# the X and Y directions. For example, the default is (3 2)
	# for 6 subdomains. 12 domains require (4 3).
	XDIVISION=3
	YDIVISION=2
	XMAX=$XDIVISION
	YMAX=$YDIVISION

	SCALE=1
	while [ $((3*SCALE)) -lt $OPENFOAM_MAXCPUS ]; do
		XMAX=$((3*SCALE))

		TESTY=`echo "scale=0; $XMAX / 3 * 2" | bc -l`
		if [ $((TESTY/2*3)) -ne $XMAX ]; then
			SCALE=$((SCALE+1))
			continue
		fi
		YMAX=$TESTY

		if [ $((XMAX*YMAX)) -le $OPENFOAM_MAXCPUS ]; then
			XDIVISION=$XMAX
			YDIVISION=$YMAX
		fi

		SCALE=$((SCALE+1))
	done

	SUBDOMAINS=$((XDIVISION*YDIVISION))
	echo Scaling parameters
	echo "o Requested subdomains $OPENFOAM_MAXCPUS"
	echo "o Actual subdomains    $SUBDOMAINS"
	echo "o X division           $XDIVISION"
	echo "o Y division           $YDIVISION"
	echo "$OPENFOAM_MAXCPUS : $SUBDOMAINS : $XDIVISION x $YDIVISION" > $LOGDIR_RESULTS/scaling-parameters

	# Rewrite benchmark parameters
	sed -i -e "s/decomposeParDict.6/decomposeParDict.$SUBDOMAINS/" Allrun
	mv system/decomposeParDict.6 system/decomposeParDict.$SUBDOMAINS
	sed -i -e "s/numberOfSubdomains.*/numberOfSubdomains $SUBDOMAINS;/" 	system/decomposeParDict.$SUBDOMAINS
	sed -i -e "s/^    n .*;/    n ($XDIVISION $YDIVISION 1);/"		system/decomposeParDict.$SUBDOMAINS

	if [ !- z $OPENFOAM_LOCAL_USER ] ; then
		chown -R mpiuser:$USERS . &>/dev/null
	fi

	;;
*)
	die "Unrecognised model $OPENFOAM_MODEL"
	;;
esac

export SUCMD=""
# Execute benchmark
if [ !- z $OPENFOAM_LOCAL_USER ] ; then
	chown -R mpiuser:users $SHELLPACK_DATA
	export SUCMD="su -p mpiuser -c"
fi
monitor_pre_hook $LOGDIR_RESULTS $OPENFOAM_MODEL
###SHELLPACK iteration_begin $OPENFOAM_ITERATIONS
	echo Executing iteration $ITERATION/$OPENFOAM_ITERATIONS
	if [ "$OPENFOAM_OPENMPI_VERSION" = "openmpi3" ]; then
		module load gnu openmpi/3 || die "Could not load openmpi/3 module"
	elif [ "$OPENFOAM_OPENMPI_VERSION" = "openmpi2" ]; then
		module load gnu openmpi/2 || die "Could not load openmpi/2 module"
	else
		die "\$OPENFOAM_OPENMPI_VERSION must be openmpi2 or openmpi3"
	fi
	module li
	$SUCMD ./Allclean
	$TIME_CMD -o $LOGDIR_RESULTS/openfoam-time.$ITERATION	\
		$SUCMD ./Allrun 2>&1 | tee $LOGDIR_RESULTS/openfoam-log.$ITERATION
	gzip $LOGDIR_RESULTS/openfoam-log.$ITERATION

	if [ "$OPENFOAM_SAVEDATA" = "yes" ]; then
		tar -czf $LOGDIR_RESULTS/openfoam-data-$ITERATION.tar.gz .
	fi
###SHELLPACK iteration_end
monitor_post_hook $LOGDIR_RESULTS $OPENFOAM_MODEL

exit $SHELLPACK_SUCCESS
